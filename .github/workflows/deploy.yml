name: Continuous Deployment

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  deploy-to-production:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # ===============================================
      # 1. CHECKOUT ET SETUP
      # ===============================================
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # ===============================================
      # 2. BUILD APPLICATION
      # ===============================================
      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      # ===============================================
      # 3. CONFIGURATION ENVIRONNEMENT
      # ===============================================
      - name: Set environment variables
        run: |
          SERVICE_NAME="ptk-orders-api"
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_ENV
          echo "DATE_TAG=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          echo "ENVIRONMENT=production" >> $GITHUB_ENV

      # ===============================================
      # 4. BUILD ET PUSH DOCKER IMAGE
      # ===============================================
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image
        run: |
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}"
          
          TAG_PROD="production"
          TAG_SHA="production-${{ env.SHORT_SHA }}"
          TAG_DATE="production-${{ env.DATE_TAG }}"
          TAG_LATEST="production-latest"

          docker build -t $IMAGE_NAME:$TAG_PROD .

          docker tag $IMAGE_NAME:$TAG_PROD $IMAGE_NAME:$TAG_SHA
          docker tag $IMAGE_NAME:$TAG_PROD $IMAGE_NAME:$TAG_DATE
          docker tag $IMAGE_NAME:$TAG_PROD $IMAGE_NAME:$TAG_LATEST

          docker push $IMAGE_NAME:$TAG_PROD
          docker push $IMAGE_NAME:$TAG_SHA
          docker push $IMAGE_NAME:$TAG_DATE
          docker push $IMAGE_NAME:$TAG_LATEST

      # ===============================================
      # 5. AUTHENTIFICATION GCP
      # ===============================================
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # ===============================================
      # 6. DÃ‰PLOIEMENT SUR VM GCP
      # ===============================================
      - name: Deploy to GCP VM Production
        run: |
          cat > deploy-script.sh << 'EOF'
          #!/bin/bash
          set -e

          SERVICE_NAME="${{ env.SERVICE_NAME }}"
          DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
          IMAGE_TAG="production-${{ env.SHORT_SHA }}"

          cd /opt/payetonkawa

          sudo docker pull $DOCKER_USERNAME/$SERVICE_NAME:$IMAGE_TAG
          sudo docker tag $DOCKER_USERNAME/$SERVICE_NAME:$IMAGE_TAG $DOCKER_USERNAME/$SERVICE_NAME:production

          COMPOSE_SERVICE="orders-api-prod"

          sudo sed -i "s|DOCKER_REGISTRY=.*|DOCKER_REGISTRY=$DOCKER_USERNAME|g" .env

          sudo docker-compose stop $COMPOSE_SERVICE || true
          sudo docker-compose rm -f $COMPOSE_SERVICE || true
          sudo docker-compose up -d $COMPOSE_SERVICE

          sleep 30

          HEALTH_PORT="4002"

          for i in {1..5}; do
            if curl -f http://localhost:$HEALTH_PORT/health 2>/dev/null; then
              echo "Service is healthy"
              break
            elif [ $i -eq 5 ]; then
              echo "Health check failed"
              sudo docker ps | grep $COMPOSE_SERVICE || echo "Container not found"
              sudo docker-compose logs --tail=20 $COMPOSE_SERVICE || echo "No logs available"
            else
              sleep 10
            fi
          done

          sudo docker images $DOCKER_USERNAME/$SERVICE_NAME --format "table {{.Tag}}\t{{.CreatedAt}}" | grep -v TAG | sort -k2 -r | tail -n +6 | awk '{print "'$DOCKER_USERNAME'/'$SERVICE_NAME':"$1}' | xargs -r sudo docker rmi || true

          echo "Deployment completed"
          EOF

          chmod +x deploy-script.sh

          gcloud compute scp deploy-script.sh ${{ secrets.GCP_VM_NAME }}:/tmp/ \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }}

          gcloud compute ssh ${{ secrets.GCP_VM_NAME }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --command="chmod +x /tmp/deploy-script.sh && /tmp/deploy-script.sh"

      # ===============================================
      # 7. NOTIFICATIONS
      # ===============================================
      - name: Deployment success notification
        if: success()
        run: |
          echo "Production deployment successful"
          echo "Service: ${{ env.SERVICE_NAME }}"
          echo "Image: ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:production-${{ env.SHORT_SHA }}"
          echo "API URL: http://${{ secrets.VM_EXTERNAL_IP }}:4002/health"

      - name: Deployment failure notification
        if: failure()
        run: |
          echo "Production deployment failed"
          echo "Service: ${{ env.SERVICE_NAME }}"
          echo "Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"